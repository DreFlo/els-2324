/*
 * generated by Xtext 2.32.0
 */
grammar InternalTableDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.feup.els5.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.feup.els5.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.feup.els5.dsl.services.TableDSLGrammarAccess;

}
@parser::members {
	private TableDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(TableDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleStart
entryRuleStart
:
{ before(grammarAccess.getStartRule()); }
	 ruleStart
{ after(grammarAccess.getStartRule()); } 
	 EOF 
;

// Rule Start
ruleStart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartAccess().getGroup()); }
		(rule__Start__Group__0)
		{ after(grammarAccess.getStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCreateTable
entryRuleCreateTable
:
{ before(grammarAccess.getCreateTableRule()); }
	 ruleCreateTable
{ after(grammarAccess.getCreateTableRule()); } 
	 EOF 
;

// Rule CreateTable
ruleCreateTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateTableAccess().getGroup()); }
		(rule__CreateTable__Group__0)
		{ after(grammarAccess.getCreateTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTableAction
entryRuleTableAction
:
{ before(grammarAccess.getTableActionRule()); }
	 ruleTableAction
{ after(grammarAccess.getTableActionRule()); } 
	 EOF 
;

// Rule TableAction
ruleTableAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableActionAccess().getAlternatives()); }
		(rule__TableAction__Alternatives)
		{ after(grammarAccess.getTableActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoadData
entryRuleLoadData
:
{ before(grammarAccess.getLoadDataRule()); }
	 ruleLoadData
{ after(grammarAccess.getLoadDataRule()); } 
	 EOF 
;

// Rule LoadData
ruleLoadData 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoadDataAccess().getGroup()); }
		(rule__LoadData__Group__0)
		{ after(grammarAccess.getLoadDataAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTableInputPath
entryRuleTableInputPath
:
{ before(grammarAccess.getTableInputPathRule()); }
	 ruleTableInputPath
{ after(grammarAccess.getTableInputPathRule()); } 
	 EOF 
;

// Rule TableInputPath
ruleTableInputPath 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getTableInputPathAccess().getPathPatternsAssignment()); }
			(rule__TableInputPath__PathPatternsAssignment)
			{ after(grammarAccess.getTableInputPathAccess().getPathPatternsAssignment()); }
		)
		(
			{ before(grammarAccess.getTableInputPathAccess().getPathPatternsAssignment()); }
			(rule__TableInputPath__PathPatternsAssignment)*
			{ after(grammarAccess.getTableInputPathAccess().getPathPatternsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutput
entryRuleOutput
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputAccess().getGroup()); }
		(rule__Output__Group__0)
		{ after(grammarAccess.getOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getAlternatives()); }
		(rule__Operation__Alternatives)
		{ after(grammarAccess.getOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelect
entryRuleSelect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getGroup()); }
		(rule__Select__Group__0)
		{ after(grammarAccess.getSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRenameColumn
entryRuleRenameColumn
:
{ before(grammarAccess.getRenameColumnRule()); }
	 ruleRenameColumn
{ after(grammarAccess.getRenameColumnRule()); } 
	 EOF 
;

// Rule RenameColumn
ruleRenameColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRenameColumnAccess().getGroup()); }
		(rule__RenameColumn__Group__0)
		{ after(grammarAccess.getRenameColumnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExtract
entryRuleExtract
:
{ before(grammarAccess.getExtractRule()); }
	 ruleExtract
{ after(grammarAccess.getExtractRule()); } 
	 EOF 
;

// Rule Extract
ruleExtract 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExtractAccess().getGroup()); }
		(rule__Extract__Group__0)
		{ after(grammarAccess.getExtractAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSquashRows
entryRuleSquashRows
:
{ before(grammarAccess.getSquashRowsRule()); }
	 ruleSquashRows
{ after(grammarAccess.getSquashRowsRule()); } 
	 EOF 
;

// Rule SquashRows
ruleSquashRows 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSquashRowsAccess().getGroup()); }
		(rule__SquashRows__Group__0)
		{ after(grammarAccess.getSquashRowsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFilter
entryRuleFilter
:
{ before(grammarAccess.getFilterRule()); }
	 ruleFilter
{ after(grammarAccess.getFilterRule()); } 
	 EOF 
;

// Rule Filter
ruleFilter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFilterAccess().getGroup()); }
		(rule__Filter__Group__0)
		{ after(grammarAccess.getFilterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableActionAccess().getLoadDataParserRuleCall_0()); }
		ruleLoadData
		{ after(grammarAccess.getTableActionAccess().getLoadDataParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTableActionAccess().getOperationParserRuleCall_1()); }
		ruleOperation
		{ after(grammarAccess.getTableActionAccess().getOperationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTableActionAccess().getGroup_2()); }
		(rule__TableAction__Group_2__0)
		{ after(grammarAccess.getTableActionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getSelectParserRuleCall_0()); }
		ruleSelect
		{ after(grammarAccess.getOperationAccess().getSelectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getRenameColumnParserRuleCall_1()); }
		ruleRenameColumn
		{ after(grammarAccess.getOperationAccess().getRenameColumnParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getExtractParserRuleCall_2()); }
		ruleExtract
		{ after(grammarAccess.getOperationAccess().getExtractParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getSquashRowsParserRuleCall_3()); }
		ruleSquashRows
		{ after(grammarAccess.getOperationAccess().getSquashRowsParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getFilterParserRuleCall_4()); }
		ruleFilter
		{ after(grammarAccess.getOperationAccess().getFilterParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group__0__Impl
	rule__Start__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getActionsAssignment_0()); }
	(rule__Start__ActionsAssignment_0)?
	{ after(grammarAccess.getStartAccess().getActionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Start__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartAccess().getActionsAssignment_1()); }
	(rule__Start__ActionsAssignment_1)*
	{ after(grammarAccess.getStartAccess().getActionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CreateTable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTable__Group__0__Impl
	rule__CreateTable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableAccess().getCreateKeyword_0()); }
	('create')?
	{ after(grammarAccess.getCreateTableAccess().getCreateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTable__Group__1__Impl
	rule__CreateTable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableAccess().getTableKeyword_1()); }
	'table'
	{ after(grammarAccess.getCreateTableAccess().getTableKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTable__Group__2__Impl
	rule__CreateTable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableAccess().getFromKeyword_2()); }
	'from'
	{ after(grammarAccess.getCreateTableAccess().getFromKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTable__Group__3__Impl
	rule__CreateTable__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableAccess().getTableInputPathParserRuleCall_3()); }
	ruleTableInputPath
	{ after(grammarAccess.getCreateTableAccess().getTableInputPathParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTable__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTable__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTable__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableAccess().getSEPTerminalRuleCall_4()); }
	RULE_SEP
	{ after(grammarAccess.getCreateTableAccess().getSEPTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TableAction__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TableAction__Group_2__0__Impl
	rule__TableAction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAction__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableActionAccess().getOutputParserRuleCall_2_0()); }
	ruleOutput
	{ after(grammarAccess.getTableActionAccess().getOutputParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAction__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TableAction__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableAction__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableActionAccess().getSEPTerminalRuleCall_2_1()); }
	RULE_SEP
	{ after(grammarAccess.getTableActionAccess().getSEPTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoadData__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadData__Group__0__Impl
	rule__LoadData__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadData__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadDataAccess().getLoadKeyword_0()); }
	'load'
	{ after(grammarAccess.getLoadDataAccess().getLoadKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadData__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoadData__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoadData__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadDataAccess().getTableInputPathParserRuleCall_1()); }
	ruleTableInputPath
	{ after(grammarAccess.getLoadDataAccess().getTableInputPathParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getOutputKeyword_0()); }
	'output'
	{ after(grammarAccess.getOutputAccess().getOutputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__1__Impl
	rule__Output__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getToKeyword_1()); }
	'to'
	{ after(grammarAccess.getOutputAccess().getToKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getOutputPathAssignment_2()); }
	(rule__Output__OutputPathAssignment_2)
	{ after(grammarAccess.getOutputAccess().getOutputPathAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
	'select'
	{ after(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSelectAccess().getColumnsAssignment_1()); }
		(rule__Select__ColumnsAssignment_1)
		{ after(grammarAccess.getSelectAccess().getColumnsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getSelectAccess().getColumnsAssignment_1()); }
		(rule__Select__ColumnsAssignment_1)*
		{ after(grammarAccess.getSelectAccess().getColumnsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RenameColumn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RenameColumn__Group__0__Impl
	rule__RenameColumn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameColumn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameColumnAccess().getRenameKeyword_0()); }
	'rename'
	{ after(grammarAccess.getRenameColumnAccess().getRenameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameColumn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RenameColumn__Group__1__Impl
	rule__RenameColumn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameColumn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameColumnAccess().getOldNameAssignment_1()); }
	(rule__RenameColumn__OldNameAssignment_1)
	{ after(grammarAccess.getRenameColumnAccess().getOldNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameColumn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RenameColumn__Group__2__Impl
	rule__RenameColumn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameColumn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameColumnAccess().getToKeyword_2()); }
	'to'
	{ after(grammarAccess.getRenameColumnAccess().getToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameColumn__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RenameColumn__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameColumn__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRenameColumnAccess().getNewNameAssignment_3()); }
	(rule__RenameColumn__NewNameAssignment_3)
	{ after(grammarAccess.getRenameColumnAccess().getNewNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Extract__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extract__Group__0__Impl
	rule__Extract__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtractAccess().getExtractKeyword_0()); }
	'extract'
	{ after(grammarAccess.getExtractAccess().getExtractKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extract__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtractAccess().getPlaceholderAssignment_1()); }
	(rule__Extract__PlaceholderAssignment_1)
	{ after(grammarAccess.getExtractAccess().getPlaceholderAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SquashRows__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SquashRows__Group__0__Impl
	rule__SquashRows__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SquashRows__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSquashRowsAccess().getSquashKeyword_0()); }
	'squash'
	{ after(grammarAccess.getSquashRowsAccess().getSquashKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SquashRows__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SquashRows__Group__1__Impl
	rule__SquashRows__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SquashRows__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSquashRowsAccess().getRowsKeyword_1()); }
	'rows'
	{ after(grammarAccess.getSquashRowsAccess().getRowsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SquashRows__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SquashRows__Group__2__Impl
	rule__SquashRows__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SquashRows__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSquashRowsAccess().getByKeyword_2()); }
	'by'
	{ after(grammarAccess.getSquashRowsAccess().getByKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SquashRows__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SquashRows__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SquashRows__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSquashRowsAccess().getColumnAssignment_3()); }
	(rule__SquashRows__ColumnAssignment_3)
	{ after(grammarAccess.getSquashRowsAccess().getColumnAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Filter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__0__Impl
	rule__Filter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getFilterKeyword_0()); }
	'filter'
	{ after(grammarAccess.getFilterAccess().getFilterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__1__Impl
	rule__Filter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getByKeyword_1()); }
	'by'
	{ after(grammarAccess.getFilterAccess().getByKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Filter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFilterAccess().getPlaceholderAssignment_2()); }
	(rule__Filter__PlaceholderAssignment_2)
	{ after(grammarAccess.getFilterAccess().getPlaceholderAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Start__ActionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartAccess().getActionsCreateTableParserRuleCall_0_0()); }
		ruleCreateTable
		{ after(grammarAccess.getStartAccess().getActionsCreateTableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__ActionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartAccess().getActionsTableActionParserRuleCall_1_0()); }
		ruleTableAction
		{ after(grammarAccess.getStartAccess().getActionsTableActionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TableInputPath__PathPatternsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableInputPathAccess().getPathPatternsSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getTableInputPathAccess().getPathPatternsSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__OutputPathAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getOutputPathSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getOutputAccess().getOutputPathSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__ColumnsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getColumnsSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSelectAccess().getColumnsSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameColumn__OldNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRenameColumnAccess().getOldNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getRenameColumnAccess().getOldNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RenameColumn__NewNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRenameColumnAccess().getNewNameSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getRenameColumnAccess().getNewNameSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extract__PlaceholderAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtractAccess().getPlaceholderSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getExtractAccess().getPlaceholderSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SquashRows__ColumnAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSquashRowsAccess().getColumnSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getSquashRowsAccess().getColumnSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Filter__PlaceholderAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFilterAccess().getPlaceholderSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getFilterAccess().getPlaceholderSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SEP : ';';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
