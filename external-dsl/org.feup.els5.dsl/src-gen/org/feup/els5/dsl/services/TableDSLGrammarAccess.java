/*
 * generated by Xtext 2.32.0
 */
package org.feup.els5.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TableDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionsCreateTableParserRuleCall_0_0 = (RuleCall)cActionsAssignment_0.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsTableActionParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		
		//Start:
		//    // TODO Named them actions, could be different
		//    actions+=CreateTable?
		//    actions+=TableAction*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO Named them actions, could be different
		//actions+=CreateTable?
		//actions+=TableAction*
		public Group getGroup() { return cGroup; }
		
		//// TODO Named them actions, could be different
		//actions+=CreateTable?
		public Assignment getActionsAssignment_0() { return cActionsAssignment_0; }
		
		//CreateTable
		public RuleCall getActionsCreateTableParserRuleCall_0_0() { return cActionsCreateTableParserRuleCall_0_0; }
		
		//actions+=TableAction*
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }
		
		//TableAction
		public RuleCall getActionsTableActionParserRuleCall_1_0() { return cActionsTableActionParserRuleCall_1_0; }
	}
	public class CreateTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.CreateTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cTableInputPathParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cANY_OTHERTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//CreateTable:
		//    "create"? "table" "from" TableInputPath ANY_OTHER
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"create"? "table" "from" TableInputPath ANY_OTHER
		public Group getGroup() { return cGroup; }
		
		//"create"?
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//"table"
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
		
		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//TableInputPath
		public RuleCall getTableInputPathParserRuleCall_3() { return cTableInputPathParserRuleCall_3; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_4() { return cANY_OTHERTerminalRuleCall_4; }
	}
	public class TableActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.TableAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cOutputParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//TableAction:
		//    LoadData | Operation | Output ANY_OTHER
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LoadData | Operation | Output ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LoadData
		public RuleCall getLoadDataParserRuleCall_0() { return cLoadDataParserRuleCall_0; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
		
		//Output ANY_OTHER
		public Group getGroup_2() { return cGroup_2; }
		
		//Output
		public RuleCall getOutputParserRuleCall_2_0() { return cOutputParserRuleCall_2_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2_1() { return cANY_OTHERTerminalRuleCall_2_1; }
	}
	public class LoadDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.LoadData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTableInputPathParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LoadData:
		//    "load" TableInputPath
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"load" TableInputPath
		public Group getGroup() { return cGroup; }
		
		//"load"
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }
		
		//TableInputPath
		public RuleCall getTableInputPathParserRuleCall_1() { return cTableInputPathParserRuleCall_1; }
	}
	public class TableInputPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.TableInputPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathPatternsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathPatternsSTRINGTerminalRuleCall_0_0 = (RuleCall)cPathPatternsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPathPatternsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPathPatternsSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cPathPatternsAssignment_1_1.eContents().get(0);
		
		//TableInputPath:
		//    pathPatterns+=STRING ("," pathPatterns+=STRING)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathPatterns+=STRING ("," pathPatterns+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//pathPatterns+=STRING
		public Assignment getPathPatternsAssignment_0() { return cPathPatternsAssignment_0; }
		
		//STRING
		public RuleCall getPathPatternsSTRINGTerminalRuleCall_0_0() { return cPathPatternsSTRINGTerminalRuleCall_0_0; }
		
		//("," pathPatterns+=STRING)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//pathPatterns+=STRING
		public Assignment getPathPatternsAssignment_1_1() { return cPathPatternsAssignment_1_1; }
		
		//STRING
		public RuleCall getPathPatternsSTRINGTerminalRuleCall_1_1_0() { return cPathPatternsSTRINGTerminalRuleCall_1_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutputPathsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutputPathsSTRINGTerminalRuleCall_2_0 = (RuleCall)cOutputPathsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutputPathsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutputPathsSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cOutputPathsAssignment_3_1.eContents().get(0);
		
		//Output:
		//    "output" "to" outputPaths+=STRING ("," outputPaths+=STRING)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"output" "to" outputPaths+=STRING ("," outputPaths+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//"output"
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//outputPaths+=STRING
		public Assignment getOutputPathsAssignment_2() { return cOutputPathsAssignment_2; }
		
		//STRING
		public RuleCall getOutputPathsSTRINGTerminalRuleCall_2_0() { return cOutputPathsSTRINGTerminalRuleCall_2_0; }
		
		//("," outputPaths+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//outputPaths+=STRING
		public Assignment getOutputPathsAssignment_3_1() { return cOutputPathsAssignment_3_1; }
		
		//STRING
		public RuleCall getOutputPathsSTRINGTerminalRuleCall_3_1_0() { return cOutputPathsSTRINGTerminalRuleCall_3_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRenameColumnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExtractParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSquashRowsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFilterParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Operation:
		//    Select | RenameColumn | Extract | SquashRows | Filter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Select | RenameColumn | Extract | SquashRows | Filter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Select
		public RuleCall getSelectParserRuleCall_0() { return cSelectParserRuleCall_0; }
		
		//RenameColumn
		public RuleCall getRenameColumnParserRuleCall_1() { return cRenameColumnParserRuleCall_1; }
		
		//Extract
		public RuleCall getExtractParserRuleCall_2() { return cExtractParserRuleCall_2; }
		
		//SquashRows
		public RuleCall getSquashRowsParserRuleCall_3() { return cSquashRowsParserRuleCall_3; }
		
		//Filter
		public RuleCall getFilterParserRuleCall_4() { return cFilterParserRuleCall_4; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnsPatternsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnsPatternsSTRINGTerminalRuleCall_1_0 = (RuleCall)cColumnsPatternsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cColumnPatternsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cColumnPatternsSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cColumnPatternsAssignment_2_1.eContents().get(0);
		
		//Select:
		//    "select" columnsPatterns+=STRING ("," columnPatterns+=STRING)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"select" columnsPatterns+=STRING ("," columnPatterns+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//columnsPatterns+=STRING
		public Assignment getColumnsPatternsAssignment_1() { return cColumnsPatternsAssignment_1; }
		
		//STRING
		public RuleCall getColumnsPatternsSTRINGTerminalRuleCall_1_0() { return cColumnsPatternsSTRINGTerminalRuleCall_1_0; }
		
		//("," columnPatterns+=STRING)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//columnPatterns+=STRING
		public Assignment getColumnPatternsAssignment_2_1() { return cColumnPatternsAssignment_2_1; }
		
		//STRING
		public RuleCall getColumnPatternsSTRINGTerminalRuleCall_2_1_0() { return cColumnPatternsSTRINGTerminalRuleCall_2_1_0; }
	}
	public class RenameColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.RenameColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColumnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRenameTuplesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRenameTuplesRenameColumnPairParserRuleCall_2_0 = (RuleCall)cRenameTuplesAssignment_2.eContents().get(0);
		
		//RenameColumn:
		//    "rename" "column"? renameTuples+=RenameColumnPair+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"rename" "column"? renameTuples+=RenameColumnPair+
		public Group getGroup() { return cGroup; }
		
		//"rename"
		public Keyword getRenameKeyword_0() { return cRenameKeyword_0; }
		
		//"column"?
		public Keyword getColumnKeyword_1() { return cColumnKeyword_1; }
		
		//renameTuples+=RenameColumnPair+
		public Assignment getRenameTuplesAssignment_2() { return cRenameTuplesAssignment_2; }
		
		//RenameColumnPair
		public RuleCall getRenameTuplesRenameColumnPairParserRuleCall_2_0() { return cRenameTuplesRenameColumnPairParserRuleCall_2_0; }
	}
	public class RenameColumnPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.RenameColumnPair");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRenameColumnToPairParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRenameColumnAppendPairParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRenameColumnPrependPairParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RenameColumnPair:
		//    RenameColumnToPair | RenameColumnAppendPair | RenameColumnPrependPair
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RenameColumnToPair | RenameColumnAppendPair | RenameColumnPrependPair
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RenameColumnToPair
		public RuleCall getRenameColumnToPairParserRuleCall_0() { return cRenameColumnToPairParserRuleCall_0; }
		
		//RenameColumnAppendPair
		public RuleCall getRenameColumnAppendPairParserRuleCall_1() { return cRenameColumnAppendPairParserRuleCall_1; }
		
		//RenameColumnPrependPair
		public RuleCall getRenameColumnPrependPairParserRuleCall_2() { return cRenameColumnPrependPairParserRuleCall_2; }
	}
	public class RenameColumnToPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.RenameColumnToPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOldNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOldNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cOldNameAssignment_0.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNewNameAssignment_2.eContents().get(0);
		
		//RenameColumnToPair:
		//    oldName=STRING "to" newName=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//oldName=STRING "to" newName=STRING
		public Group getGroup() { return cGroup; }
		
		//oldName=STRING
		public Assignment getOldNameAssignment_0() { return cOldNameAssignment_0; }
		
		//STRING
		public RuleCall getOldNameSTRINGTerminalRuleCall_0_0() { return cOldNameSTRINGTerminalRuleCall_0_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//newName=STRING
		public Assignment getNewNameAssignment_2() { return cNewNameAssignment_2; }
		
		//STRING
		public RuleCall getNewNameSTRINGTerminalRuleCall_2_0() { return cNewNameSTRINGTerminalRuleCall_2_0; }
	}
	public class RenameColumnPrependPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.RenameColumnPrependPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOldNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOldNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cOldNameAssignment_0.eContents().get(0);
		private final Keyword cPrependKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPrefixAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrefixSTRINGTerminalRuleCall_2_0 = (RuleCall)cPrefixAssignment_2.eContents().get(0);
		
		//RenameColumnPrependPair:
		//    oldName=STRING "prepend" prefix=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//oldName=STRING "prepend" prefix=STRING
		public Group getGroup() { return cGroup; }
		
		//oldName=STRING
		public Assignment getOldNameAssignment_0() { return cOldNameAssignment_0; }
		
		//STRING
		public RuleCall getOldNameSTRINGTerminalRuleCall_0_0() { return cOldNameSTRINGTerminalRuleCall_0_0; }
		
		//"prepend"
		public Keyword getPrependKeyword_1() { return cPrependKeyword_1; }
		
		//prefix=STRING
		public Assignment getPrefixAssignment_2() { return cPrefixAssignment_2; }
		
		//STRING
		public RuleCall getPrefixSTRINGTerminalRuleCall_2_0() { return cPrefixSTRINGTerminalRuleCall_2_0; }
	}
	public class RenameColumnAppendPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.RenameColumnAppendPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOldNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOldNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cOldNameAssignment_0.eContents().get(0);
		private final Keyword cAppendKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSuffixAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSuffixSTRINGTerminalRuleCall_2_0 = (RuleCall)cSuffixAssignment_2.eContents().get(0);
		
		//RenameColumnAppendPair:
		//    oldName=STRING "append" suffix=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//oldName=STRING "append" suffix=STRING
		public Group getGroup() { return cGroup; }
		
		//oldName=STRING
		public Assignment getOldNameAssignment_0() { return cOldNameAssignment_0; }
		
		//STRING
		public RuleCall getOldNameSTRINGTerminalRuleCall_0_0() { return cOldNameSTRINGTerminalRuleCall_0_0; }
		
		//"append"
		public Keyword getAppendKeyword_1() { return cAppendKeyword_1; }
		
		//suffix=STRING
		public Assignment getSuffixAssignment_2() { return cSuffixAssignment_2; }
		
		//STRING
		public RuleCall getSuffixSTRINGTerminalRuleCall_2_0() { return cSuffixSTRINGTerminalRuleCall_2_0; }
	}
	public class ExtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Extract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetColumnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetColumnsSTRINGTerminalRuleCall_1_0 = (RuleCall)cTargetColumnsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTargetColumnsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTargetColumnsSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTargetColumnsAssignment_2_1.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceColumnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceColumnSTRINGTerminalRuleCall_4_0 = (RuleCall)cSourceColumnAssignment_4.eContents().get(0);
		private final Keyword cSelectKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSelectorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSelectorSelectorParserRuleCall_6_0 = (RuleCall)cSelectorAssignment_6.eContents().get(0);
		private final Keyword cSortKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cByKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cComparatorAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cComparatorComparatorParserRuleCall_9_0 = (RuleCall)cComparatorAssignment_9.eContents().get(0);
		
		//Extract:
		//    "extract" targetColumns+=STRING ("," targetColumns+=STRING)* "from" sourceColumn=STRING "select" selector=Selector "sort" "by"? comparator=Comparator
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"extract" targetColumns+=STRING ("," targetColumns+=STRING)* "from" sourceColumn=STRING "select" selector=Selector "sort" "by"? comparator=Comparator
		public Group getGroup() { return cGroup; }
		
		//"extract"
		public Keyword getExtractKeyword_0() { return cExtractKeyword_0; }
		
		//targetColumns+=STRING
		public Assignment getTargetColumnsAssignment_1() { return cTargetColumnsAssignment_1; }
		
		//STRING
		public RuleCall getTargetColumnsSTRINGTerminalRuleCall_1_0() { return cTargetColumnsSTRINGTerminalRuleCall_1_0; }
		
		//("," targetColumns+=STRING)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//targetColumns+=STRING
		public Assignment getTargetColumnsAssignment_2_1() { return cTargetColumnsAssignment_2_1; }
		
		//STRING
		public RuleCall getTargetColumnsSTRINGTerminalRuleCall_2_1_0() { return cTargetColumnsSTRINGTerminalRuleCall_2_1_0; }
		
		//"from"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//sourceColumn=STRING
		public Assignment getSourceColumnAssignment_4() { return cSourceColumnAssignment_4; }
		
		//STRING
		public RuleCall getSourceColumnSTRINGTerminalRuleCall_4_0() { return cSourceColumnSTRINGTerminalRuleCall_4_0; }
		
		//"select"
		public Keyword getSelectKeyword_5() { return cSelectKeyword_5; }
		
		//selector=Selector
		public Assignment getSelectorAssignment_6() { return cSelectorAssignment_6; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_6_0() { return cSelectorSelectorParserRuleCall_6_0; }
		
		//"sort"
		public Keyword getSortKeyword_7() { return cSortKeyword_7; }
		
		//"by"?
		public Keyword getByKeyword_8() { return cByKeyword_8; }
		
		//comparator=Comparator
		public Assignment getComparatorAssignment_9() { return cComparatorAssignment_9; }
		
		//Comparator
		public RuleCall getComparatorComparatorParserRuleCall_9_0() { return cComparatorComparatorParserRuleCall_9_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Selector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSelectorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cMAXKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSelectorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMINKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSelectorAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cMEDIANKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cTOPKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_3_1_0 = (RuleCall)cNAssignment_3_1.eContents().get(0);
		
		//Selector:
		//    {Selector} "MAX" | {Selector} "MIN" | {Selector} "MEDIAN" | ("TOP" n=INT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Selector} "MAX" | {Selector} "MIN" | {Selector} "MEDIAN" | ("TOP" n=INT)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Selector} "MAX"
		public Group getGroup_0() { return cGroup_0; }
		
		//{Selector}
		public Action getSelectorAction_0_0() { return cSelectorAction_0_0; }
		
		//"MAX"
		public Keyword getMAXKeyword_0_1() { return cMAXKeyword_0_1; }
		
		//{Selector} "MIN"
		public Group getGroup_1() { return cGroup_1; }
		
		//{Selector}
		public Action getSelectorAction_1_0() { return cSelectorAction_1_0; }
		
		//"MIN"
		public Keyword getMINKeyword_1_1() { return cMINKeyword_1_1; }
		
		//{Selector} "MEDIAN"
		public Group getGroup_2() { return cGroup_2; }
		
		//{Selector}
		public Action getSelectorAction_2_0() { return cSelectorAction_2_0; }
		
		//"MEDIAN"
		public Keyword getMEDIANKeyword_2_1() { return cMEDIANKeyword_2_1; }
		
		//("TOP" n=INT)
		public Group getGroup_3() { return cGroup_3; }
		
		//"TOP"
		public Keyword getTOPKeyword_3_0() { return cTOPKeyword_3_0; }
		
		//n=INT
		public Assignment getNAssignment_3_1() { return cNAssignment_3_1; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_3_1_0() { return cNINTTerminalRuleCall_3_1_0; }
	}
	public class ComparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Comparator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeysAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeysSTRINGTerminalRuleCall_0_0 = (RuleCall)cKeysAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeysAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeysSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cKeysAssignment_1_1.eContents().get(0);
		
		//Comparator:
		//    keys+=STRING ("," keys+=STRING)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//keys+=STRING ("," keys+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//keys+=STRING
		public Assignment getKeysAssignment_0() { return cKeysAssignment_0; }
		
		//STRING
		public RuleCall getKeysSTRINGTerminalRuleCall_0_0() { return cKeysSTRINGTerminalRuleCall_0_0; }
		
		//("," keys+=STRING)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//keys+=STRING
		public Assignment getKeysAssignment_1_1() { return cKeysAssignment_1_1; }
		
		//STRING
		public RuleCall getKeysSTRINGTerminalRuleCall_1_1_0() { return cKeysSTRINGTerminalRuleCall_1_1_0; }
	}
	public class SquashRowsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.SquashRows");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSquashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRowsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cByKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnsSTRINGTerminalRuleCall_3_0 = (RuleCall)cColumnsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cColumnsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cColumnsSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cColumnsAssignment_4_1.eContents().get(0);
		
		//SquashRows:
		//    "squash" "rows"? "by" columns+=STRING ("," columns+=STRING)* // TODO Maybe we could extend this one to squash by multiple columns?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"squash" "rows"? "by" columns+=STRING ("," columns+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//"squash"
		public Keyword getSquashKeyword_0() { return cSquashKeyword_0; }
		
		//"rows"?
		public Keyword getRowsKeyword_1() { return cRowsKeyword_1; }
		
		//"by"
		public Keyword getByKeyword_2() { return cByKeyword_2; }
		
		//columns+=STRING
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//STRING
		public RuleCall getColumnsSTRINGTerminalRuleCall_3_0() { return cColumnsSTRINGTerminalRuleCall_3_0; }
		
		//("," columns+=STRING)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//columns+=STRING
		public Assignment getColumnsAssignment_4_1() { return cColumnsAssignment_4_1; }
		
		//STRING
		public RuleCall getColumnsSTRINGTerminalRuleCall_4_1_0() { return cColumnsSTRINGTerminalRuleCall_4_1_0; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDenylistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDenylistFilterDenylistParserRuleCall_1_0 = (RuleCall)cDenylistAssignment_1.eContents().get(0);
		private final Assignment cExceptlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExceptlistFilterExceptlistParserRuleCall_2_0 = (RuleCall)cExceptlistAssignment_2.eContents().get(0);
		
		//Filter:
		//    "filter" denylist=FilterDenylist exceptlist=FilterExceptlist? // TODO
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"filter" denylist=FilterDenylist exceptlist=FilterExceptlist?
		public Group getGroup() { return cGroup; }
		
		//"filter"
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//denylist=FilterDenylist
		public Assignment getDenylistAssignment_1() { return cDenylistAssignment_1; }
		
		//FilterDenylist
		public RuleCall getDenylistFilterDenylistParserRuleCall_1_0() { return cDenylistFilterDenylistParserRuleCall_1_0; }
		
		//exceptlist=FilterExceptlist?
		public Assignment getExceptlistAssignment_2() { return cExceptlistAssignment_2; }
		
		//FilterExceptlist
		public RuleCall getExceptlistFilterExceptlistParserRuleCall_2_0() { return cExceptlistFilterExceptlistParserRuleCall_2_0; }
	}
	public class FilterDenylistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.FilterDenylist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDenyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDenylistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDenylistFilterRuleParserRuleCall_1_0 = (RuleCall)cDenylistAssignment_1.eContents().get(0);
		
		//FilterDenylist:
		//    "deny" denylist+=FilterRule
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"deny" denylist+=FilterRule
		public Group getGroup() { return cGroup; }
		
		//"deny"
		public Keyword getDenyKeyword_0() { return cDenyKeyword_0; }
		
		//denylist+=FilterRule
		public Assignment getDenylistAssignment_1() { return cDenylistAssignment_1; }
		
		//FilterRule
		public RuleCall getDenylistFilterRuleParserRuleCall_1_0() { return cDenylistFilterRuleParserRuleCall_1_0; }
	}
	public class FilterExceptlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.FilterExceptlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExceptlistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExceptlistFilterRuleParserRuleCall_1_0 = (RuleCall)cExceptlistAssignment_1.eContents().get(0);
		
		//FilterExceptlist:
		//    "except" exceptlist+=FilterRule
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"except" exceptlist+=FilterRule
		public Group getGroup() { return cGroup; }
		
		//"except"
		public Keyword getExceptKeyword_0() { return cExceptKeyword_0; }
		
		//exceptlist+=FilterRule
		public Assignment getExceptlistAssignment_1() { return cExceptlistAssignment_1; }
		
		//FilterRule
		public RuleCall getExceptlistFilterRuleParserRuleCall_1_0() { return cExceptlistFilterRuleParserRuleCall_1_0; }
	}
	public class FilterRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.FilterRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFilterColumnRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFilterObjectTypeRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FilterRule:
		//    FilterColumnRule | FilterObjectTypeRule
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FilterColumnRule | FilterObjectTypeRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FilterColumnRule
		public RuleCall getFilterColumnRuleParserRuleCall_0() { return cFilterColumnRuleParserRuleCall_0; }
		
		//FilterObjectTypeRule
		public RuleCall getFilterObjectTypeRuleParserRuleCall_1() { return cFilterObjectTypeRuleParserRuleCall_1; }
	}
	public class FilterObjectTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.FilterObjectTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnPatternSTRINGTerminalRuleCall_1_0 = (RuleCall)cColumnPatternAssignment_1.eContents().get(0);
		
		//FilterObjectTypeRule:
		//    "column" columnPattern=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"column" columnPattern=STRING
		public Group getGroup() { return cGroup; }
		
		//"column"
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }
		
		//columnPattern=STRING
		public Assignment getColumnPatternAssignment_1() { return cColumnPatternAssignment_1; }
		
		//STRING
		public RuleCall getColumnPatternSTRINGTerminalRuleCall_1_0() { return cColumnPatternSTRINGTerminalRuleCall_1_0; }
	}
	public class FilterColumnRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.FilterColumnRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectClassSTRINGTerminalRuleCall_2_0 = (RuleCall)cObjectClassAssignment_2.eContents().get(0);
		
		//FilterColumnRule:
		//    "object" "of"? objectClass=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"object" "of"? objectClass=STRING
		public Group getGroup() { return cGroup; }
		
		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//"of"?
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//objectClass=STRING
		public Assignment getObjectClassAssignment_2() { return cObjectClassAssignment_2; }
		
		//STRING
		public RuleCall getObjectClassSTRINGTerminalRuleCall_2_0() { return cObjectClassSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final StartElements pStart;
	private final CreateTableElements pCreateTable;
	private final TableActionElements pTableAction;
	private final LoadDataElements pLoadData;
	private final TableInputPathElements pTableInputPath;
	private final OutputElements pOutput;
	private final OperationElements pOperation;
	private final SelectElements pSelect;
	private final RenameColumnElements pRenameColumn;
	private final RenameColumnPairElements pRenameColumnPair;
	private final RenameColumnToPairElements pRenameColumnToPair;
	private final RenameColumnPrependPairElements pRenameColumnPrependPair;
	private final RenameColumnAppendPairElements pRenameColumnAppendPair;
	private final ExtractElements pExtract;
	private final SelectorElements pSelector;
	private final ComparatorElements pComparator;
	private final SquashRowsElements pSquashRows;
	private final FilterElements pFilter;
	private final FilterDenylistElements pFilterDenylist;
	private final FilterExceptlistElements pFilterExceptlist;
	private final FilterRuleElements pFilterRule;
	private final FilterObjectTypeRuleElements pFilterObjectTypeRule;
	private final FilterColumnRuleElements pFilterColumnRule;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TableDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStart = new StartElements();
		this.pCreateTable = new CreateTableElements();
		this.pTableAction = new TableActionElements();
		this.pLoadData = new LoadDataElements();
		this.pTableInputPath = new TableInputPathElements();
		this.pOutput = new OutputElements();
		this.pOperation = new OperationElements();
		this.pSelect = new SelectElements();
		this.pRenameColumn = new RenameColumnElements();
		this.pRenameColumnPair = new RenameColumnPairElements();
		this.pRenameColumnToPair = new RenameColumnToPairElements();
		this.pRenameColumnPrependPair = new RenameColumnPrependPairElements();
		this.pRenameColumnAppendPair = new RenameColumnAppendPairElements();
		this.pExtract = new ExtractElements();
		this.pSelector = new SelectorElements();
		this.pComparator = new ComparatorElements();
		this.pSquashRows = new SquashRowsElements();
		this.pFilter = new FilterElements();
		this.pFilterDenylist = new FilterDenylistElements();
		this.pFilterExceptlist = new FilterExceptlistElements();
		this.pFilterRule = new FilterRuleElements();
		this.pFilterObjectTypeRule = new FilterObjectTypeRuleElements();
		this.pFilterColumnRule = new FilterColumnRuleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.feup.els5.dsl.TableDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Start:
	//    // TODO Named them actions, could be different
	//    actions+=CreateTable?
	//    actions+=TableAction*
	//;
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}
	
	//CreateTable:
	//    "create"? "table" "from" TableInputPath ANY_OTHER
	//;
	public CreateTableElements getCreateTableAccess() {
		return pCreateTable;
	}
	
	public ParserRule getCreateTableRule() {
		return getCreateTableAccess().getRule();
	}
	
	//TableAction:
	//    LoadData | Operation | Output ANY_OTHER
	//;
	public TableActionElements getTableActionAccess() {
		return pTableAction;
	}
	
	public ParserRule getTableActionRule() {
		return getTableActionAccess().getRule();
	}
	
	//LoadData:
	//    "load" TableInputPath
	//;
	public LoadDataElements getLoadDataAccess() {
		return pLoadData;
	}
	
	public ParserRule getLoadDataRule() {
		return getLoadDataAccess().getRule();
	}
	
	//TableInputPath:
	//    pathPatterns+=STRING ("," pathPatterns+=STRING)*
	//;
	public TableInputPathElements getTableInputPathAccess() {
		return pTableInputPath;
	}
	
	public ParserRule getTableInputPathRule() {
		return getTableInputPathAccess().getRule();
	}
	
	//Output:
	//    "output" "to" outputPaths+=STRING ("," outputPaths+=STRING)*
	//;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Operation:
	//    Select | RenameColumn | Extract | SquashRows | Filter
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Select:
	//    "select" columnsPatterns+=STRING ("," columnPatterns+=STRING)*
	//;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//RenameColumn:
	//    "rename" "column"? renameTuples+=RenameColumnPair+
	//;
	public RenameColumnElements getRenameColumnAccess() {
		return pRenameColumn;
	}
	
	public ParserRule getRenameColumnRule() {
		return getRenameColumnAccess().getRule();
	}
	
	//RenameColumnPair:
	//    RenameColumnToPair | RenameColumnAppendPair | RenameColumnPrependPair
	//;
	public RenameColumnPairElements getRenameColumnPairAccess() {
		return pRenameColumnPair;
	}
	
	public ParserRule getRenameColumnPairRule() {
		return getRenameColumnPairAccess().getRule();
	}
	
	//RenameColumnToPair:
	//    oldName=STRING "to" newName=STRING
	//;
	public RenameColumnToPairElements getRenameColumnToPairAccess() {
		return pRenameColumnToPair;
	}
	
	public ParserRule getRenameColumnToPairRule() {
		return getRenameColumnToPairAccess().getRule();
	}
	
	//RenameColumnPrependPair:
	//    oldName=STRING "prepend" prefix=STRING
	//;
	public RenameColumnPrependPairElements getRenameColumnPrependPairAccess() {
		return pRenameColumnPrependPair;
	}
	
	public ParserRule getRenameColumnPrependPairRule() {
		return getRenameColumnPrependPairAccess().getRule();
	}
	
	//RenameColumnAppendPair:
	//    oldName=STRING "append" suffix=STRING
	//;
	public RenameColumnAppendPairElements getRenameColumnAppendPairAccess() {
		return pRenameColumnAppendPair;
	}
	
	public ParserRule getRenameColumnAppendPairRule() {
		return getRenameColumnAppendPairAccess().getRule();
	}
	
	//Extract:
	//    "extract" targetColumns+=STRING ("," targetColumns+=STRING)* "from" sourceColumn=STRING "select" selector=Selector "sort" "by"? comparator=Comparator
	//;
	public ExtractElements getExtractAccess() {
		return pExtract;
	}
	
	public ParserRule getExtractRule() {
		return getExtractAccess().getRule();
	}
	
	//Selector:
	//    {Selector} "MAX" | {Selector} "MIN" | {Selector} "MEDIAN" | ("TOP" n=INT)
	//;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Comparator:
	//    keys+=STRING ("," keys+=STRING)*
	//;
	public ComparatorElements getComparatorAccess() {
		return pComparator;
	}
	
	public ParserRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}
	
	//SquashRows:
	//    "squash" "rows"? "by" columns+=STRING ("," columns+=STRING)* // TODO Maybe we could extend this one to squash by multiple columns?
	//;
	public SquashRowsElements getSquashRowsAccess() {
		return pSquashRows;
	}
	
	public ParserRule getSquashRowsRule() {
		return getSquashRowsAccess().getRule();
	}
	
	//Filter:
	//    "filter" denylist=FilterDenylist exceptlist=FilterExceptlist? // TODO
	//;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//FilterDenylist:
	//    "deny" denylist+=FilterRule
	//;
	public FilterDenylistElements getFilterDenylistAccess() {
		return pFilterDenylist;
	}
	
	public ParserRule getFilterDenylistRule() {
		return getFilterDenylistAccess().getRule();
	}
	
	//FilterExceptlist:
	//    "except" exceptlist+=FilterRule
	//;
	public FilterExceptlistElements getFilterExceptlistAccess() {
		return pFilterExceptlist;
	}
	
	public ParserRule getFilterExceptlistRule() {
		return getFilterExceptlistAccess().getRule();
	}
	
	//FilterRule:
	//    FilterColumnRule | FilterObjectTypeRule
	//;
	public FilterRuleElements getFilterRuleAccess() {
		return pFilterRule;
	}
	
	public ParserRule getFilterRuleRule() {
		return getFilterRuleAccess().getRule();
	}
	
	//FilterObjectTypeRule:
	//    "column" columnPattern=STRING
	//;
	public FilterObjectTypeRuleElements getFilterObjectTypeRuleAccess() {
		return pFilterObjectTypeRule;
	}
	
	public ParserRule getFilterObjectTypeRuleRule() {
		return getFilterObjectTypeRuleAccess().getRule();
	}
	
	//FilterColumnRule:
	//    "object" "of"? objectClass=STRING
	//;
	public FilterColumnRuleElements getFilterColumnRuleAccess() {
		return pFilterColumnRule;
	}
	
	public ParserRule getFilterColumnRuleRule() {
		return getFilterColumnRuleAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
