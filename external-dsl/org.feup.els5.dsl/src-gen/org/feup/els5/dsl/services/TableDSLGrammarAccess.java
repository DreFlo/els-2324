/*
 * generated by Xtext 2.32.0
 */
package org.feup.els5.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TableDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionsCreateTableParserRuleCall_0_0 = (RuleCall)cActionsAssignment_0.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsTableActionParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		
		//Start:
		//    // Named them actions, could be different
		//    actions+=CreateTable?
		//    actions+=TableAction*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// Named them actions, could be different
		//actions+=CreateTable?
		//actions+=TableAction*
		public Group getGroup() { return cGroup; }
		
		//// Named them actions, could be different
		//actions+=CreateTable?
		public Assignment getActionsAssignment_0() { return cActionsAssignment_0; }
		
		//CreateTable
		public RuleCall getActionsCreateTableParserRuleCall_0_0() { return cActionsCreateTableParserRuleCall_0_0; }
		
		//actions+=TableAction*
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }
		
		//TableAction
		public RuleCall getActionsTableActionParserRuleCall_1_0() { return cActionsTableActionParserRuleCall_1_0; }
	}
	public class CreateTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.CreateTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cTableInputPathParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSEPTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//CreateTable:
		//    "create"? "table" "from" TableInputPath SEP
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"create"? "table" "from" TableInputPath SEP
		public Group getGroup() { return cGroup; }
		
		//"create"?
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//"table"
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
		
		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//TableInputPath
		public RuleCall getTableInputPathParserRuleCall_3() { return cTableInputPathParserRuleCall_3; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_4() { return cSEPTerminalRuleCall_4; }
	}
	public class TableActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.TableAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cOutputParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//TableAction:
		//    LoadData | Operation | Output SEP
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LoadData | Operation | Output SEP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LoadData
		public RuleCall getLoadDataParserRuleCall_0() { return cLoadDataParserRuleCall_0; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
		
		//Output SEP
		public Group getGroup_2() { return cGroup_2; }
		
		//Output
		public RuleCall getOutputParserRuleCall_2_0() { return cOutputParserRuleCall_2_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_2_1() { return cSEPTerminalRuleCall_2_1; }
	}
	public class LoadDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.LoadData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTableInputPathParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LoadData:
		//    "load" TableInputPath
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"load" TableInputPath
		public Group getGroup() { return cGroup; }
		
		//"load"
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }
		
		//TableInputPath
		public RuleCall getTableInputPathParserRuleCall_1() { return cTableInputPathParserRuleCall_1; }
	}
	public class TableInputPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.TableInputPath");
		private final Assignment cPathPatternsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPathPatternsSTRINGTerminalRuleCall_0 = (RuleCall)cPathPatternsAssignment.eContents().get(0);
		
		//TableInputPath:
		//    pathPatterns+=STRING+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathPatterns+=STRING+
		public Assignment getPathPatternsAssignment() { return cPathPatternsAssignment; }
		
		//STRING
		public RuleCall getPathPatternsSTRINGTerminalRuleCall_0() { return cPathPatternsSTRINGTerminalRuleCall_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutputPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutputPathSTRINGTerminalRuleCall_2_0 = (RuleCall)cOutputPathAssignment_2.eContents().get(0);
		
		//Output:
		//    "output" "to" outputPath=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"output" "to" outputPath=STRING
		public Group getGroup() { return cGroup; }
		
		//"output"
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//outputPath=STRING
		public Assignment getOutputPathAssignment_2() { return cOutputPathAssignment_2; }
		
		//STRING
		public RuleCall getOutputPathSTRINGTerminalRuleCall_2_0() { return cOutputPathSTRINGTerminalRuleCall_2_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRenameColumnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExtractParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSquashRowsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFilterParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Operation:
		//    Select | RenameColumn | Extract | SquashRows | Filter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Select | RenameColumn | Extract | SquashRows | Filter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Select
		public RuleCall getSelectParserRuleCall_0() { return cSelectParserRuleCall_0; }
		
		//RenameColumn
		public RuleCall getRenameColumnParserRuleCall_1() { return cRenameColumnParserRuleCall_1; }
		
		//Extract
		public RuleCall getExtractParserRuleCall_2() { return cExtractParserRuleCall_2; }
		
		//SquashRows
		public RuleCall getSquashRowsParserRuleCall_3() { return cSquashRowsParserRuleCall_3; }
		
		//Filter
		public RuleCall getFilterParserRuleCall_4() { return cFilterParserRuleCall_4; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnsSTRINGTerminalRuleCall_1_0 = (RuleCall)cColumnsAssignment_1.eContents().get(0);
		
		//Select:
		//    "select" columns+=STRING+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"select" columns+=STRING+
		public Group getGroup() { return cGroup; }
		
		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//columns+=STRING+
		public Assignment getColumnsAssignment_1() { return cColumnsAssignment_1; }
		
		//STRING
		public RuleCall getColumnsSTRINGTerminalRuleCall_1_0() { return cColumnsSTRINGTerminalRuleCall_1_0; }
	}
	public class RenameColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.RenameColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOldNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cOldNameAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNewNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNewNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNewNameAssignment_3.eContents().get(0);
		
		//RenameColumn:
		//    "rename" oldName=STRING "to" newName=STRING // TODO Needs to support multiple
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"rename" oldName=STRING "to" newName=STRING
		public Group getGroup() { return cGroup; }
		
		//"rename"
		public Keyword getRenameKeyword_0() { return cRenameKeyword_0; }
		
		//oldName=STRING
		public Assignment getOldNameAssignment_1() { return cOldNameAssignment_1; }
		
		//STRING
		public RuleCall getOldNameSTRINGTerminalRuleCall_1_0() { return cOldNameSTRINGTerminalRuleCall_1_0; }
		
		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//newName=STRING
		public Assignment getNewNameAssignment_3() { return cNewNameAssignment_3; }
		
		//STRING
		public RuleCall getNewNameSTRINGTerminalRuleCall_3_0() { return cNewNameSTRINGTerminalRuleCall_3_0; }
	}
	public class ExtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Extract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlaceholderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlaceholderSTRINGTerminalRuleCall_1_0 = (RuleCall)cPlaceholderAssignment_1.eContents().get(0);
		
		//Extract:
		//    "extract" placeholder=STRING // TODO
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"extract" placeholder=STRING
		public Group getGroup() { return cGroup; }
		
		//"extract"
		public Keyword getExtractKeyword_0() { return cExtractKeyword_0; }
		
		//placeholder=STRING
		public Assignment getPlaceholderAssignment_1() { return cPlaceholderAssignment_1; }
		
		//STRING
		public RuleCall getPlaceholderSTRINGTerminalRuleCall_1_0() { return cPlaceholderSTRINGTerminalRuleCall_1_0; }
	}
	public class SquashRowsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.SquashRows");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSquashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRowsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cByKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnSTRINGTerminalRuleCall_3_0 = (RuleCall)cColumnAssignment_3.eContents().get(0);
		
		//SquashRows:
		//    "squash" "rows" "by" column=STRING // TODO Maybe we could extend this one to squash by multiple columns?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"squash" "rows" "by" column=STRING
		public Group getGroup() { return cGroup; }
		
		//"squash"
		public Keyword getSquashKeyword_0() { return cSquashKeyword_0; }
		
		//"rows"
		public Keyword getRowsKeyword_1() { return cRowsKeyword_1; }
		
		//"by"
		public Keyword getByKeyword_2() { return cByKeyword_2; }
		
		//column=STRING
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_3_0() { return cColumnSTRINGTerminalRuleCall_3_0; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPlaceholderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPlaceholderSTRINGTerminalRuleCall_2_0 = (RuleCall)cPlaceholderAssignment_2.eContents().get(0);
		
		//Filter:
		//    "filter" "by" placeholder=STRING // TODO
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"filter" "by" placeholder=STRING
		public Group getGroup() { return cGroup; }
		
		//"filter"
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//"by"
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//placeholder=STRING
		public Assignment getPlaceholderAssignment_2() { return cPlaceholderAssignment_2; }
		
		//STRING
		public RuleCall getPlaceholderSTRINGTerminalRuleCall_2_0() { return cPlaceholderSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final StartElements pStart;
	private final TerminalRule tSEP;
	private final CreateTableElements pCreateTable;
	private final TableActionElements pTableAction;
	private final LoadDataElements pLoadData;
	private final TableInputPathElements pTableInputPath;
	private final OutputElements pOutput;
	private final OperationElements pOperation;
	private final SelectElements pSelect;
	private final RenameColumnElements pRenameColumn;
	private final ExtractElements pExtract;
	private final SquashRowsElements pSquashRows;
	private final FilterElements pFilter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TableDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStart = new StartElements();
		this.tSEP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.feup.els5.dsl.TableDSL.SEP");
		this.pCreateTable = new CreateTableElements();
		this.pTableAction = new TableActionElements();
		this.pLoadData = new LoadDataElements();
		this.pTableInputPath = new TableInputPathElements();
		this.pOutput = new OutputElements();
		this.pOperation = new OperationElements();
		this.pSelect = new SelectElements();
		this.pRenameColumn = new RenameColumnElements();
		this.pExtract = new ExtractElements();
		this.pSquashRows = new SquashRowsElements();
		this.pFilter = new FilterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.feup.els5.dsl.TableDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Start:
	//    // Named them actions, could be different
	//    actions+=CreateTable?
	//    actions+=TableAction*
	//;
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}
	
	//terminal SEP:
	//    ";"
	//;
	public TerminalRule getSEPRule() {
		return tSEP;
	}
	
	//CreateTable:
	//    "create"? "table" "from" TableInputPath SEP
	//;
	public CreateTableElements getCreateTableAccess() {
		return pCreateTable;
	}
	
	public ParserRule getCreateTableRule() {
		return getCreateTableAccess().getRule();
	}
	
	//TableAction:
	//    LoadData | Operation | Output SEP
	//;
	public TableActionElements getTableActionAccess() {
		return pTableAction;
	}
	
	public ParserRule getTableActionRule() {
		return getTableActionAccess().getRule();
	}
	
	//LoadData:
	//    "load" TableInputPath
	//;
	public LoadDataElements getLoadDataAccess() {
		return pLoadData;
	}
	
	public ParserRule getLoadDataRule() {
		return getLoadDataAccess().getRule();
	}
	
	//TableInputPath:
	//    pathPatterns+=STRING+
	//;
	public TableInputPathElements getTableInputPathAccess() {
		return pTableInputPath;
	}
	
	public ParserRule getTableInputPathRule() {
		return getTableInputPathAccess().getRule();
	}
	
	//Output:
	//    "output" "to" outputPath=STRING
	//;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Operation:
	//    Select | RenameColumn | Extract | SquashRows | Filter
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Select:
	//    "select" columns+=STRING+
	//;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//RenameColumn:
	//    "rename" oldName=STRING "to" newName=STRING // TODO Needs to support multiple
	//;
	public RenameColumnElements getRenameColumnAccess() {
		return pRenameColumn;
	}
	
	public ParserRule getRenameColumnRule() {
		return getRenameColumnAccess().getRule();
	}
	
	//Extract:
	//    "extract" placeholder=STRING // TODO
	//;
	public ExtractElements getExtractAccess() {
		return pExtract;
	}
	
	public ParserRule getExtractRule() {
		return getExtractAccess().getRule();
	}
	
	//SquashRows:
	//    "squash" "rows" "by" column=STRING // TODO Maybe we could extend this one to squash by multiple columns?
	//;
	public SquashRowsElements getSquashRowsAccess() {
		return pSquashRows;
	}
	
	public ParserRule getSquashRowsRule() {
		return getSquashRowsAccess().getRule();
	}
	
	//Filter:
	//    "filter" "by" placeholder=STRING // TODO
	//;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
