/**
 * generated by Xtext 2.33.0
 */
package org.feup.els5.dsl.tableDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.feup.els5.dsl.tableDSL.FilterObjectTypeRule;
import org.feup.els5.dsl.tableDSL.ObjectTypeSelector;
import org.feup.els5.dsl.tableDSL.TableDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Filter Object Type Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.feup.els5.dsl.tableDSL.impl.FilterObjectTypeRuleImpl#getObjectClasses <em>Object Classes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FilterObjectTypeRuleImpl extends FilterRuleImpl implements FilterObjectTypeRule
{
  /**
   * The cached value of the '{@link #getObjectClasses() <em>Object Classes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectClasses()
   * @generated
   * @ordered
   */
  protected EList<ObjectTypeSelector> objectClasses;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FilterObjectTypeRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TableDSLPackage.Literals.FILTER_OBJECT_TYPE_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ObjectTypeSelector> getObjectClasses()
  {
    if (objectClasses == null)
    {
      objectClasses = new EObjectContainmentEList<ObjectTypeSelector>(ObjectTypeSelector.class, this, TableDSLPackage.FILTER_OBJECT_TYPE_RULE__OBJECT_CLASSES);
    }
    return objectClasses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TableDSLPackage.FILTER_OBJECT_TYPE_RULE__OBJECT_CLASSES:
        return ((InternalEList<?>)getObjectClasses()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TableDSLPackage.FILTER_OBJECT_TYPE_RULE__OBJECT_CLASSES:
        return getObjectClasses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TableDSLPackage.FILTER_OBJECT_TYPE_RULE__OBJECT_CLASSES:
        getObjectClasses().clear();
        getObjectClasses().addAll((Collection<? extends ObjectTypeSelector>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TableDSLPackage.FILTER_OBJECT_TYPE_RULE__OBJECT_CLASSES:
        getObjectClasses().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TableDSLPackage.FILTER_OBJECT_TYPE_RULE__OBJECT_CLASSES:
        return objectClasses != null && !objectClasses.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FilterObjectTypeRuleImpl
