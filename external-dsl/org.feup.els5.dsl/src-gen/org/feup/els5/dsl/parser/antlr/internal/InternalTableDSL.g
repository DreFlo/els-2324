/*
 * generated by Xtext 2.32.0
 */
grammar InternalTableDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.feup.els5.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.feup.els5.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.feup.els5.dsl.services.TableDSLGrammarAccess;

}

@parser::members {

 	private TableDSLGrammarAccess grammarAccess;

    public InternalTableDSLParser(TokenStream input, TableDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Start";
   	}

   	@Override
   	protected TableDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleStart
entryRuleStart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartRule()); }
	iv_ruleStart=ruleStart
	{ $current=$iv_ruleStart.current; }
	EOF;

// Rule Start
ruleStart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStartAccess().getActionsCreateTableParserRuleCall_0_0());
				}
				lv_actions_0_0=ruleCreateTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartRule());
					}
					add(
						$current,
						"actions",
						lv_actions_0_0,
						"org.feup.els5.dsl.TableDSL.CreateTable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStartAccess().getActionsTableActionParserRuleCall_1_0());
				}
				lv_actions_1_0=ruleTableAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartRule());
					}
					add(
						$current,
						"actions",
						lv_actions_1_0,
						"org.feup.els5.dsl.TableDSL.TableAction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCreateTable
entryRuleCreateTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateTableRule()); }
	iv_ruleCreateTable=ruleCreateTable
	{ $current=$iv_ruleCreateTable.current; }
	EOF;

// Rule CreateTable
ruleCreateTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='create'
			{
				newLeafNode(otherlv_0, grammarAccess.getCreateTableAccess().getCreateKeyword_0());
			}
		)?
		otherlv_1='table'
		{
			newLeafNode(otherlv_1, grammarAccess.getCreateTableAccess().getTableKeyword_1());
		}
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getCreateTableAccess().getFromKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getCreateTableAccess().getTableInputPathParserRuleCall_3());
		}
		this_TableInputPath_3=ruleTableInputPath
		{
			$current = $this_TableInputPath_3.current;
			afterParserOrEnumRuleCall();
		}
		this_ANY_OTHER_4=RULE_ANY_OTHER
		{
			newLeafNode(this_ANY_OTHER_4, grammarAccess.getCreateTableAccess().getANY_OTHERTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleTableAction
entryRuleTableAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableActionRule()); }
	iv_ruleTableAction=ruleTableAction
	{ $current=$iv_ruleTableAction.current; }
	EOF;

// Rule TableAction
ruleTableAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTableActionAccess().getLoadDataParserRuleCall_0_0());
			}
			this_LoadData_0=ruleLoadData
			{
				$current = $this_LoadData_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getTableActionAccess().getOperationParserRuleCall_0_1());
			}
			this_Operation_1=ruleOperation
			{
				$current = $this_Operation_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getTableActionAccess().getOutputParserRuleCall_0_2());
			}
			this_Output_2=ruleOutput
			{
				$current = $this_Output_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		this_ANY_OTHER_3=RULE_ANY_OTHER
		{
			newLeafNode(this_ANY_OTHER_3, grammarAccess.getTableActionAccess().getANY_OTHERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleLoadData
entryRuleLoadData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoadDataRule()); }
	iv_ruleLoadData=ruleLoadData
	{ $current=$iv_ruleLoadData.current; }
	EOF;

// Rule LoadData
ruleLoadData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='load'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoadDataAccess().getLoadKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getLoadDataAccess().getTableInputPathParserRuleCall_1());
		}
		this_TableInputPath_1=ruleTableInputPath
		{
			$current = $this_TableInputPath_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTableInputPath
entryRuleTableInputPath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableInputPathRule()); }
	iv_ruleTableInputPath=ruleTableInputPath
	{ $current=$iv_ruleTableInputPath.current; }
	EOF;

// Rule TableInputPath
ruleTableInputPath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_pathPatterns_0_0=RULE_STRING
				{
					newLeafNode(lv_pathPatterns_0_0, grammarAccess.getTableInputPathAccess().getPathPatternsSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableInputPathRule());
					}
					addWithLastConsumed(
						$current,
						"pathPatterns",
						lv_pathPatterns_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getTableInputPathAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_pathPatterns_2_0=RULE_STRING
					{
						newLeafNode(lv_pathPatterns_2_0, grammarAccess.getTableInputPathAccess().getPathPatternsSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTableInputPathRule());
						}
						addWithLastConsumed(
							$current,
							"pathPatterns",
							lv_pathPatterns_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='output'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutputAccess().getOutputKeyword_0());
		}
		(
			otherlv_1='to'
			{
				newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getToKeyword_1());
			}
		)?
		(
			(
				lv_outputPaths_2_0=RULE_STRING
				{
					newLeafNode(lv_outputPaths_2_0, grammarAccess.getOutputAccess().getOutputPathsSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					addWithLastConsumed(
						$current,
						"outputPaths",
						lv_outputPaths_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getOutputAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_outputPaths_4_0=RULE_STRING
					{
						newLeafNode(lv_outputPaths_4_0, grammarAccess.getOutputAccess().getOutputPathsSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOutputRule());
						}
						addWithLastConsumed(
							$current,
							"outputPaths",
							lv_outputPaths_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getSelectParserRuleCall_0());
		}
		this_Select_0=ruleSelect
		{
			$current = $this_Select_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getRenameColumnParserRuleCall_1());
		}
		this_RenameColumn_1=ruleRenameColumn
		{
			$current = $this_RenameColumn_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getExtractParserRuleCall_2());
		}
		this_Extract_2=ruleExtract
		{
			$current = $this_Extract_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getSquashRowsParserRuleCall_3());
		}
		this_SquashRows_3=ruleSquashRows
		{
			$current = $this_SquashRows_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getFilterParserRuleCall_4());
		}
		this_Filter_4=ruleFilter
		{
			$current = $this_Filter_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getReduceParserRuleCall_5());
		}
		this_Reduce_5=ruleReduce
		{
			$current = $this_Reduce_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	iv_ruleSelect=ruleSelect
	{ $current=$iv_ruleSelect.current; }
	EOF;

// Rule Select
ruleSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='select'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSelectKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectAccess().getColumnPatternsColumnNameParserRuleCall_1_0());
				}
				lv_columnPatterns_1_0=ruleColumnName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectRule());
					}
					add(
						$current,
						"columnPatterns",
						lv_columnPatterns_1_0,
						"org.feup.els5.dsl.TableDSL.ColumnName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectAccess().getColumnPatternsColumnNameParserRuleCall_2_1_0());
					}
					lv_columnPatterns_3_0=ruleColumnName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectRule());
						}
						add(
							$current,
							"columnPatterns",
							lv_columnPatterns_3_0,
							"org.feup.els5.dsl.TableDSL.ColumnName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRenameColumn
entryRuleRenameColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameColumnRule()); }
	iv_ruleRenameColumn=ruleRenameColumn
	{ $current=$iv_ruleRenameColumn.current; }
	EOF;

// Rule RenameColumn
ruleRenameColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rename'
		{
			newLeafNode(otherlv_0, grammarAccess.getRenameColumnAccess().getRenameKeyword_0());
		}
		(
			otherlv_1='column'
			{
				newLeafNode(otherlv_1, grammarAccess.getRenameColumnAccess().getColumnKeyword_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRenameColumnAccess().getRenameTuplesRenameColumnPairParserRuleCall_2_0());
				}
				lv_renameTuples_2_0=ruleRenameColumnPair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRenameColumnRule());
					}
					add(
						$current,
						"renameTuples",
						lv_renameTuples_2_0,
						"org.feup.els5.dsl.TableDSL.RenameColumnPair");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getRenameColumnAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRenameColumnAccess().getRenameTuplesRenameColumnPairParserRuleCall_3_1_0());
					}
					lv_renameTuples_4_0=ruleRenameColumnPair
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRenameColumnRule());
						}
						add(
							$current,
							"renameTuples",
							lv_renameTuples_4_0,
							"org.feup.els5.dsl.TableDSL.RenameColumnPair");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRenameColumnPair
entryRuleRenameColumnPair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameColumnPairRule()); }
	iv_ruleRenameColumnPair=ruleRenameColumnPair
	{ $current=$iv_ruleRenameColumnPair.current; }
	EOF;

// Rule RenameColumnPair
ruleRenameColumnPair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRenameColumnPairAccess().getRenameColumnToPairParserRuleCall_0());
		}
		this_RenameColumnToPair_0=ruleRenameColumnToPair
		{
			$current = $this_RenameColumnToPair_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRenameColumnPairAccess().getRenameColumnAppendPairParserRuleCall_1());
		}
		this_RenameColumnAppendPair_1=ruleRenameColumnAppendPair
		{
			$current = $this_RenameColumnAppendPair_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRenameColumnPairAccess().getRenameColumnPrependPairParserRuleCall_2());
		}
		this_RenameColumnPrependPair_2=ruleRenameColumnPrependPair
		{
			$current = $this_RenameColumnPrependPair_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRenameColumnPairAccess().getRenameColumnReplacePairParserRuleCall_3());
		}
		this_RenameColumnReplacePair_3=ruleRenameColumnReplacePair
		{
			$current = $this_RenameColumnReplacePair_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRenameColumnToPair
entryRuleRenameColumnToPair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameColumnToPairRule()); }
	iv_ruleRenameColumnToPair=ruleRenameColumnToPair
	{ $current=$iv_ruleRenameColumnToPair.current; }
	EOF;

// Rule RenameColumnToPair
ruleRenameColumnToPair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_oldName_0_0=RULE_STRING
				{
					newLeafNode(lv_oldName_0_0, grammarAccess.getRenameColumnToPairAccess().getOldNameSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameColumnToPairRule());
					}
					setWithLastConsumed(
						$current,
						"oldName",
						lv_oldName_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='to'
		{
			newLeafNode(otherlv_1, grammarAccess.getRenameColumnToPairAccess().getToKeyword_1());
		}
		(
			(
				lv_newName_2_0=RULE_STRING
				{
					newLeafNode(lv_newName_2_0, grammarAccess.getRenameColumnToPairAccess().getNewNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameColumnToPairRule());
					}
					setWithLastConsumed(
						$current,
						"newName",
						lv_newName_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRenameColumnPrependPair
entryRuleRenameColumnPrependPair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameColumnPrependPairRule()); }
	iv_ruleRenameColumnPrependPair=ruleRenameColumnPrependPair
	{ $current=$iv_ruleRenameColumnPrependPair.current; }
	EOF;

// Rule RenameColumnPrependPair
ruleRenameColumnPrependPair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_oldName_0_0=RULE_STRING
				{
					newLeafNode(lv_oldName_0_0, grammarAccess.getRenameColumnPrependPairAccess().getOldNameSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameColumnPrependPairRule());
					}
					setWithLastConsumed(
						$current,
						"oldName",
						lv_oldName_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='prepend'
		{
			newLeafNode(otherlv_1, grammarAccess.getRenameColumnPrependPairAccess().getPrependKeyword_1());
		}
		(
			(
				lv_prefix_2_0=RULE_STRING
				{
					newLeafNode(lv_prefix_2_0, grammarAccess.getRenameColumnPrependPairAccess().getPrefixSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameColumnPrependPairRule());
					}
					setWithLastConsumed(
						$current,
						"prefix",
						lv_prefix_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRenameColumnAppendPair
entryRuleRenameColumnAppendPair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameColumnAppendPairRule()); }
	iv_ruleRenameColumnAppendPair=ruleRenameColumnAppendPair
	{ $current=$iv_ruleRenameColumnAppendPair.current; }
	EOF;

// Rule RenameColumnAppendPair
ruleRenameColumnAppendPair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_oldName_0_0=RULE_STRING
				{
					newLeafNode(lv_oldName_0_0, grammarAccess.getRenameColumnAppendPairAccess().getOldNameSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameColumnAppendPairRule());
					}
					setWithLastConsumed(
						$current,
						"oldName",
						lv_oldName_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='append'
		{
			newLeafNode(otherlv_1, grammarAccess.getRenameColumnAppendPairAccess().getAppendKeyword_1());
		}
		(
			(
				lv_suffix_2_0=RULE_STRING
				{
					newLeafNode(lv_suffix_2_0, grammarAccess.getRenameColumnAppendPairAccess().getSuffixSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameColumnAppendPairRule());
					}
					setWithLastConsumed(
						$current,
						"suffix",
						lv_suffix_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRenameColumnReplacePair
entryRuleRenameColumnReplacePair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameColumnReplacePairRule()); }
	iv_ruleRenameColumnReplacePair=ruleRenameColumnReplacePair
	{ $current=$iv_ruleRenameColumnReplacePair.current; }
	EOF;

// Rule RenameColumnReplacePair
ruleRenameColumnReplacePair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_oldName_0_0=RULE_STRING
				{
					newLeafNode(lv_oldName_0_0, grammarAccess.getRenameColumnReplacePairAccess().getOldNameSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameColumnReplacePairRule());
					}
					setWithLastConsumed(
						$current,
						"oldName",
						lv_oldName_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='replace'
		{
			newLeafNode(otherlv_1, grammarAccess.getRenameColumnReplacePairAccess().getReplaceKeyword_1());
		}
		(
			otherlv_2='with'
			{
				newLeafNode(otherlv_2, grammarAccess.getRenameColumnReplacePairAccess().getWithKeyword_2());
			}
		)?
		(
			(
				lv_replacement_3_0=RULE_STRING
				{
					newLeafNode(lv_replacement_3_0, grammarAccess.getRenameColumnReplacePairAccess().getReplacementSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRenameColumnReplacePairRule());
					}
					setWithLastConsumed(
						$current,
						"replacement",
						lv_replacement_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleExtract
entryRuleExtract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtractRule()); }
	iv_ruleExtract=ruleExtract
	{ $current=$iv_ruleExtract.current; }
	EOF;

// Rule Extract
ruleExtract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='extract'
		{
			newLeafNode(otherlv_0, grammarAccess.getExtractAccess().getExtractKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtractAccess().getTargetsExtractColumnMappingParserRuleCall_1_0());
				}
				lv_targets_1_0=ruleExtractColumnMapping
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtractRule());
					}
					add(
						$current,
						"targets",
						lv_targets_1_0,
						"org.feup.els5.dsl.TableDSL.ExtractColumnMapping");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getExtractAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExtractAccess().getTargetsExtractColumnMappingParserRuleCall_2_1_0());
					}
					lv_targets_3_0=ruleExtractColumnMapping
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExtractRule());
						}
						add(
							$current,
							"targets",
							lv_targets_3_0,
							"org.feup.els5.dsl.TableDSL.ExtractColumnMapping");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='from'
		{
			newLeafNode(otherlv_4, grammarAccess.getExtractAccess().getFromKeyword_3());
		}
		(
			(
				lv_sourceColumn_5_0=RULE_STRING
				{
					newLeafNode(lv_sourceColumn_5_0, grammarAccess.getExtractAccess().getSourceColumnSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtractRule());
					}
					setWithLastConsumed(
						$current,
						"sourceColumn",
						lv_sourceColumn_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='select'
		{
			newLeafNode(otherlv_6, grammarAccess.getExtractAccess().getSelectKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtractAccess().getSelectorSelectorParserRuleCall_6_0());
				}
				lv_selector_7_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtractRule());
					}
					set(
						$current,
						"selector",
						lv_selector_7_0,
						"org.feup.els5.dsl.TableDSL.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='sort'
		{
			newLeafNode(otherlv_8, grammarAccess.getExtractAccess().getSortKeyword_7());
		}
		(
			otherlv_9='by'
			{
				newLeafNode(otherlv_9, grammarAccess.getExtractAccess().getByKeyword_8());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExtractAccess().getComparatorComparatorParserRuleCall_9_0());
				}
				lv_comparator_10_0=ruleComparator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtractRule());
					}
					set(
						$current,
						"comparator",
						lv_comparator_10_0,
						"org.feup.els5.dsl.TableDSL.Comparator");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExtractColumnMapping
entryRuleExtractColumnMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtractColumnMappingRule()); }
	iv_ruleExtractColumnMapping=ruleExtractColumnMapping
	{ $current=$iv_ruleExtractColumnMapping.current; }
	EOF;

// Rule ExtractColumnMapping
ruleExtractColumnMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_targetColumn_0_0=RULE_STRING
				{
					newLeafNode(lv_targetColumn_0_0, grammarAccess.getExtractColumnMappingAccess().getTargetColumnSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtractColumnMappingRule());
					}
					setWithLastConsumed(
						$current,
						"targetColumn",
						lv_targetColumn_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_1='as'
			{
				newLeafNode(otherlv_1, grammarAccess.getExtractColumnMappingAccess().getAsKeyword_1_0());
			}
			(
				(
					lv_newName_2_0=RULE_STRING
					{
						newLeafNode(lv_newName_2_0, grammarAccess.getExtractColumnMappingAccess().getNewNameSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExtractColumnMappingRule());
						}
						setWithLastConsumed(
							$current,
							"newName",
							lv_newName_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSelectorAccess().getKeySelectorParserRuleCall_0());
		}
		this_KeySelector_0=ruleKeySelector
		{
			$current = $this_KeySelector_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectorAccess().getTopNSelectorParserRuleCall_1());
		}
		this_TopNSelector_1=ruleTopNSelector
		{
			$current = $this_TopNSelector_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleKeySelector
entryRuleKeySelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeySelectorRule()); }
	iv_ruleKeySelector=ruleKeySelector
	{ $current=$iv_ruleKeySelector.current; }
	EOF;

// Rule KeySelector
ruleKeySelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_key_0_0=RULE_SELECTOR_KEYWORDS
			{
				newLeafNode(lv_key_0_0, grammarAccess.getKeySelectorAccess().getKeySELECTOR_KEYWORDSTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getKeySelectorRule());
				}
				setWithLastConsumed(
					$current,
					"key",
					lv_key_0_0,
					"org.feup.els5.dsl.TableDSL.SELECTOR_KEYWORDS");
			}
		)
	)
;

// Entry rule entryRuleTopNSelector
entryRuleTopNSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopNSelectorRule()); }
	iv_ruleTopNSelector=ruleTopNSelector
	{ $current=$iv_ruleTopNSelector.current; }
	EOF;

// Rule TopNSelector
ruleTopNSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TOP'
		{
			newLeafNode(otherlv_0, grammarAccess.getTopNSelectorAccess().getTOPKeyword_0());
		}
		(
			(
				lv_n_1_0=RULE_INT
				{
					newLeafNode(lv_n_1_0, grammarAccess.getTopNSelectorAccess().getNINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTopNSelectorRule());
					}
					setWithLastConsumed(
						$current,
						"n",
						lv_n_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleComparator
entryRuleComparator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparatorRule()); }
	iv_ruleComparator=ruleComparator
	{ $current=$iv_ruleComparator.current; }
	EOF;

// Rule Comparator
ruleComparator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getComparatorAccess().getKeysColumnNameParserRuleCall_0_0());
				}
				lv_keys_0_0=ruleColumnName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparatorRule());
					}
					add(
						$current,
						"keys",
						lv_keys_0_0,
						"org.feup.els5.dsl.TableDSL.ColumnName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getComparatorAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComparatorAccess().getKeysColumnNameParserRuleCall_1_1_0());
					}
					lv_keys_2_0=ruleColumnName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparatorRule());
						}
						add(
							$current,
							"keys",
							lv_keys_2_0,
							"org.feup.els5.dsl.TableDSL.ColumnName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSquashRows
entryRuleSquashRows returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSquashRowsRule()); }
	iv_ruleSquashRows=ruleSquashRows
	{ $current=$iv_ruleSquashRows.current; }
	EOF;

// Rule SquashRows
ruleSquashRows returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='squash'
		{
			newLeafNode(otherlv_0, grammarAccess.getSquashRowsAccess().getSquashKeyword_0());
		}
		(
			otherlv_1='rows'
			{
				newLeafNode(otherlv_1, grammarAccess.getSquashRowsAccess().getRowsKeyword_1());
			}
		)?
		otherlv_2='by'
		{
			newLeafNode(otherlv_2, grammarAccess.getSquashRowsAccess().getByKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSquashRowsAccess().getColumnsColumnNameParserRuleCall_3_0());
				}
				lv_columns_3_0=ruleColumnName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSquashRowsRule());
					}
					add(
						$current,
						"columns",
						lv_columns_3_0,
						"org.feup.els5.dsl.TableDSL.ColumnName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getSquashRowsAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSquashRowsAccess().getColumnsColumnNameParserRuleCall_4_1_0());
					}
					lv_columns_5_0=ruleColumnName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSquashRowsRule());
						}
						add(
							$current,
							"columns",
							lv_columns_5_0,
							"org.feup.els5.dsl.TableDSL.ColumnName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	iv_ruleFilter=ruleFilter
	{ $current=$iv_ruleFilter.current; }
	EOF;

// Rule Filter
ruleFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='filter'
		{
			newLeafNode(otherlv_0, grammarAccess.getFilterAccess().getFilterKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterAccess().getDenylistFilterDenylistParserRuleCall_1_0());
				}
				lv_denylist_1_0=ruleFilterDenylist
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterRule());
					}
					set(
						$current,
						"denylist",
						lv_denylist_1_0,
						"org.feup.els5.dsl.TableDSL.FilterDenylist");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterAccess().getExceptlistFilterExceptlistParserRuleCall_2_0());
				}
				lv_exceptlist_2_0=ruleFilterExceptlist
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterRule());
					}
					set(
						$current,
						"exceptlist",
						lv_exceptlist_2_0,
						"org.feup.els5.dsl.TableDSL.FilterExceptlist");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleFilterDenylist
entryRuleFilterDenylist returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterDenylistRule()); }
	iv_ruleFilterDenylist=ruleFilterDenylist
	{ $current=$iv_ruleFilterDenylist.current; }
	EOF;

// Rule FilterDenylist
ruleFilterDenylist returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='deny'
		{
			newLeafNode(otherlv_0, grammarAccess.getFilterDenylistAccess().getDenyKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterDenylistAccess().getDenylistFilterRuleParserRuleCall_1_0());
				}
				lv_denylist_1_0=ruleFilterRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterDenylistRule());
					}
					add(
						$current,
						"denylist",
						lv_denylist_1_0,
						"org.feup.els5.dsl.TableDSL.FilterRule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getFilterDenylistAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFilterDenylistAccess().getDenylistFilterRuleParserRuleCall_2_1_0());
					}
					lv_denylist_3_0=ruleFilterRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFilterDenylistRule());
						}
						add(
							$current,
							"denylist",
							lv_denylist_3_0,
							"org.feup.els5.dsl.TableDSL.FilterRule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFilterExceptlist
entryRuleFilterExceptlist returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterExceptlistRule()); }
	iv_ruleFilterExceptlist=ruleFilterExceptlist
	{ $current=$iv_ruleFilterExceptlist.current; }
	EOF;

// Rule FilterExceptlist
ruleFilterExceptlist returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='except'
		{
			newLeafNode(otherlv_0, grammarAccess.getFilterExceptlistAccess().getExceptKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterExceptlistAccess().getExceptlistFilterRuleParserRuleCall_1_0());
				}
				lv_exceptlist_1_0=ruleFilterRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterExceptlistRule());
					}
					add(
						$current,
						"exceptlist",
						lv_exceptlist_1_0,
						"org.feup.els5.dsl.TableDSL.FilterRule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getFilterExceptlistAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFilterExceptlistAccess().getExceptlistFilterRuleParserRuleCall_2_1_0());
					}
					lv_exceptlist_3_0=ruleFilterRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFilterExceptlistRule());
						}
						add(
							$current,
							"exceptlist",
							lv_exceptlist_3_0,
							"org.feup.els5.dsl.TableDSL.FilterRule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFilterRule
entryRuleFilterRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterRuleRule()); }
	iv_ruleFilterRule=ruleFilterRule
	{ $current=$iv_ruleFilterRule.current; }
	EOF;

// Rule FilterRule
ruleFilterRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFilterRuleAccess().getFilterColumnRuleParserRuleCall_0());
		}
		this_FilterColumnRule_0=ruleFilterColumnRule
		{
			$current = $this_FilterColumnRule_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFilterRuleAccess().getFilterObjectTypeRuleParserRuleCall_1());
		}
		this_FilterObjectTypeRule_1=ruleFilterObjectTypeRule
		{
			$current = $this_FilterObjectTypeRule_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFilterColumnRule
entryRuleFilterColumnRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterColumnRuleRule()); }
	iv_ruleFilterColumnRule=ruleFilterColumnRule
	{ $current=$iv_ruleFilterColumnRule.current; }
	EOF;

// Rule FilterColumnRule
ruleFilterColumnRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='column'
			{
				newLeafNode(otherlv_0, grammarAccess.getFilterColumnRuleAccess().getColumnKeyword_0_0());
			}
			    |
			otherlv_1='columns'
			{
				newLeafNode(otherlv_1, grammarAccess.getFilterColumnRuleAccess().getColumnsKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterColumnRuleAccess().getColumnPatternsColumnNameParserRuleCall_1_0());
				}
				lv_columnPatterns_2_0=ruleColumnName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterColumnRuleRule());
					}
					add(
						$current,
						"columnPatterns",
						lv_columnPatterns_2_0,
						"org.feup.els5.dsl.TableDSL.ColumnName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getFilterColumnRuleAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFilterColumnRuleAccess().getColumnPatternsColumnNameParserRuleCall_2_1_0());
					}
					lv_columnPatterns_4_0=ruleColumnName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFilterColumnRuleRule());
						}
						add(
							$current,
							"columnPatterns",
							lv_columnPatterns_4_0,
							"org.feup.els5.dsl.TableDSL.ColumnName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFilterObjectTypeRule
entryRuleFilterObjectTypeRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterObjectTypeRuleRule()); }
	iv_ruleFilterObjectTypeRule=ruleFilterObjectTypeRule
	{ $current=$iv_ruleFilterObjectTypeRule.current; }
	EOF;

// Rule FilterObjectTypeRule
ruleFilterObjectTypeRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='object'
			{
				newLeafNode(otherlv_0, grammarAccess.getFilterObjectTypeRuleAccess().getObjectKeyword_0_0());
			}
			    |
			otherlv_1='objects'
			{
				newLeafNode(otherlv_1, grammarAccess.getFilterObjectTypeRuleAccess().getObjectsKeyword_0_1());
			}
		)
		(
			otherlv_2='of'
			{
				newLeafNode(otherlv_2, grammarAccess.getFilterObjectTypeRuleAccess().getOfKeyword_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterObjectTypeRuleAccess().getObjectClassesObjectTypeSelectorParserRuleCall_2_0());
				}
				lv_objectClasses_3_0=ruleObjectTypeSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterObjectTypeRuleRule());
					}
					add(
						$current,
						"objectClasses",
						lv_objectClasses_3_0,
						"org.feup.els5.dsl.TableDSL.ObjectTypeSelector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getFilterObjectTypeRuleAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFilterObjectTypeRuleAccess().getObjectClassesObjectTypeSelectorParserRuleCall_3_1_0());
					}
					lv_objectClasses_5_0=ruleObjectTypeSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFilterObjectTypeRuleRule());
						}
						add(
							$current,
							"objectClasses",
							lv_objectClasses_5_0,
							"org.feup.els5.dsl.TableDSL.ObjectTypeSelector");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleReduce
entryRuleReduce returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReduceRule()); }
	iv_ruleReduce=ruleReduce
	{ $current=$iv_ruleReduce.current; }
	EOF;

// Rule Reduce
ruleReduce returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reduce'
		{
			newLeafNode(otherlv_0, grammarAccess.getReduceAccess().getReduceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReduceAccess().getObjectClassObjectTypeSelectorParserRuleCall_1_0());
				}
				lv_objectClass_1_0=ruleObjectTypeSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReduceRule());
					}
					set(
						$current,
						"objectClass",
						lv_objectClass_1_0,
						"org.feup.els5.dsl.TableDSL.ObjectTypeSelector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='to'
			{
				newLeafNode(otherlv_2, grammarAccess.getReduceAccess().getToKeyword_2());
			}
		)?
		(
			(
				lv_functions_3_0=RULE_SELECTOR_KEYWORDS
				{
					newLeafNode(lv_functions_3_0, grammarAccess.getReduceAccess().getFunctionsSELECTOR_KEYWORDSTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReduceRule());
					}
					addWithLastConsumed(
						$current,
						"functions",
						lv_functions_3_0,
						"org.feup.els5.dsl.TableDSL.SELECTOR_KEYWORDS");
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getReduceAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_functions_5_0=RULE_SELECTOR_KEYWORDS
					{
						newLeafNode(lv_functions_5_0, grammarAccess.getReduceAccess().getFunctionsSELECTOR_KEYWORDSTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReduceRule());
						}
						addWithLastConsumed(
							$current,
							"functions",
							lv_functions_5_0,
							"org.feup.els5.dsl.TableDSL.SELECTOR_KEYWORDS");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleColumnName
entryRuleColumnName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnNameRule()); }
	iv_ruleColumnName=ruleColumnName
	{ $current=$iv_ruleColumnName.current; }
	EOF;

// Rule ColumnName
ruleColumnName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_columnName_0_1=RULE_COLUMN_NAME_KEYWORDS
				{
					newLeafNode(lv_columnName_0_1, grammarAccess.getColumnNameAccess().getColumnNameCOLUMN_NAME_KEYWORDSTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnNameRule());
					}
					setWithLastConsumed(
						$current,
						"columnName",
						lv_columnName_0_1,
						"org.feup.els5.dsl.TableDSL.COLUMN_NAME_KEYWORDS");
				}
				    |
				lv_columnName_0_2=RULE_STRING
				{
					newLeafNode(lv_columnName_0_2, grammarAccess.getColumnNameAccess().getColumnNameSTRINGTerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnNameRule());
					}
					setWithLastConsumed(
						$current,
						"columnName",
						lv_columnName_0_2,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleObjectTypeSelector
entryRuleObjectTypeSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectTypeSelectorRule()); }
	iv_ruleObjectTypeSelector=ruleObjectTypeSelector
	{ $current=$iv_ruleObjectTypeSelector.current; }
	EOF;

// Rule ObjectTypeSelector
ruleObjectTypeSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_objectType_0_1=RULE_OBJECT_TYPES
				{
					newLeafNode(lv_objectType_0_1, grammarAccess.getObjectTypeSelectorAccess().getObjectTypeOBJECT_TYPESTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectTypeSelectorRule());
					}
					setWithLastConsumed(
						$current,
						"objectType",
						lv_objectType_0_1,
						"org.feup.els5.dsl.TableDSL.OBJECT_TYPES");
				}
				    |
				lv_objectType_0_2=RULE_STRING
				{
					newLeafNode(lv_objectType_0_2, grammarAccess.getObjectTypeSelectorAccess().getObjectTypeSTRINGTerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectTypeSelectorRule());
					}
					setWithLastConsumed(
						$current,
						"objectType",
						lv_objectType_0_2,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_SELECTOR_KEYWORDS : ('MAX'|'MIN'|'MEDIAN'|'SUM'|'AVG');

RULE_OBJECT_TYPES : ('STRING'|'NUMBER'|'INTEGER'|'FLOAT'|'DOUBLE'|'BOOLEAN');

RULE_COLUMN_NAME_KEYWORDS : ('FILENAME'|'DIRECTORY');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
